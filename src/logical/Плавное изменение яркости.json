{
  "scenarioTemplate": {
    "name": "Плавное изменение яркости",
    "desc": "Изменяет яркость включаемой лампочки от начального до конечного значения за указанное количество секунд",
    "active": true,
    "onStart": false,
    "sync": false,
    "data": "info = {\r\n    name: \"Плавное изменение яркости\",\r\n    description: \"Изменяет яркость включаемой лампочки от начального до конечного значения за указанное количество секунд\",\r\n    version: \"0.2\",\r\n    author: \"@dshtolin\",\r\n    onStart: false,\r\n\r\n    sourceServices: [HS.Lightbulb],\r\n    sourceCharacteristics: [HC.On],\r\n\r\n    options: {\r\n        StartValue: {\r\n            name: {\r\n                en: \"Start value\",\r\n                ru: \"Начальное значение\"\r\n            },\r\n            type: \"Integer\",\r\n            value: 1\r\n        },\r\n        EndValue: {\r\n            name: {\r\n                en: \"End value\",\r\n                ru: \"Конечное значение\"\r\n            },\r\n            type: \"Integer\",\r\n            value: 100\r\n        },\r\n        Duration: {\r\n            name: {\r\n                en: \"Duration in seconds\",\r\n                ru: \"Продолжительность операции в секундах\"\r\n            },\r\n            type: \"Integer\",\r\n            value: 900\r\n        }\r\n    },\r\n\r\n    variables: {\r\n        timerId: undefined\r\n    }\r\n}\r\n\r\nfunction trigger(source, value, variables, options) {\r\n\r\n    if (variables.timerId != null) {\r\n        variables.timerId.clear();\r\n        variables.timerId = null;\r\n    }\r\n\r\n    if (value) {\r\n        let brightness = source.getService().getCharacteristic(HC.Brightness);\r\n        if (brightness == null) {\r\n            log.info(\"Лампочка {}, не умеет изменять яркость\", source.getAccessory())\r\n            return;\r\n        }\r\n\r\n        let duration = options.Duration * 1000;\r\n        let diff = Math.abs(options.EndValue - options.StartValue);\r\n        let delay = (duration - duration % diff) / diff;\r\n        let asc = options.EndValue > options.StartValue;\r\n\r\n        let currentValue = options.StartValue;\r\n        brightness.setValue(currentValue);\r\n\r\n        variables.timerId = setInterval(function () {\r\n\r\n            if ((asc && currentValue >= options.EndValue) || (!asc && currentValue <= options.EndValue)) {\r\n                variables.timerId.clear();\r\n                variables.timerId = null;\r\n                return;\r\n            }\r\n\r\n            currentValue += (asc ? 1 : -1);\r\n            brightness.setValue(currentValue);\r\n\r\n        }, delay);\r\n    }\r\n}\r\n\r\n",
    "type": "LOGIC"
  }
}